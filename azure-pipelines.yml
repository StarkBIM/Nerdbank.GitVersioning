trigger:
  batch: true
  branches:
    include: ["master", "v*"]
  paths:
    exclude: ["doc", "*.md"]

variables:
  TreatWarningsAsErrors: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  BuildConfiguration: Release
  BuildPlatform: Any CPU
  NuGet.ForceNuGetForPush: true # Workaround for public feed limitation in NuGetCommand task - remove after July 15, 2019.

resources:
  containers:
  - container: xenial
    image: andrewarnott/linux-buildagent
  - container: bionic
    image: microsoft/dotnet:2.1-sdk-bionic
  - container: bionic-3.0
    image: mcr.microsoft.com/dotnet/core/sdk:3.0-bionic
  - container: disco
    image: mcr.microsoft.com/dotnet/core/sdk:3.0-disco

jobs:
- job: Windows
  pool: Hosted Windows 2019 with VS2019
  steps:
  - checkout: self
    clean: true
    submodules: false
  - script: |
      git config --global user.name ci
      git config --global user.email me@ci.com
    displayName: Configure git commit author for testing

  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      useGlobalJson: true
  - script: dotnet --info
    displayName: Show dotnet SDK info

  - script: |
      dotnet tool install --tool-path . nbgv
      .\nbgv cloud -p src -a
    displayName: Set build number

  - task: DotNetCoreCLI@2
    displayName: Restore NuGet packages
    inputs:
      command: restore
      verbosityRestore: normal # detailed, normal, minimal
      projects: src/**/*.sln
      feedsToUse: config
      nugetConfigPath: src/nuget.config
      workingDirectory: src

  - task: YarnInstaller@3
    inputs:
      versionSpec: '1.x'
      
  - task: Yarn@3
    inputs:
      projectDirectory: 'src/nerdbank-gitversioning.npm'

  - script: dotnet build -c $(BuildConfiguration) --no-restore /t:build,pack /bl:"$(Build.ArtifactStagingDirectory)/build_logs/msbuild.binlog"
    displayName: Build NuGet package and tests
    workingDirectory: src

  - script: dotnet publish -c $(BuildConfiguration) -o ..\nerdbank-gitversioning.npm\out\nbgv.cli\tools\netcoreapp2.1\any /bl:"$(Build.ArtifactStagingDirectory)/build_logs/nbgv_publish.binlog"
    displayName: Build NuGet package and tests
    workingDirectory: src\nbgv

  - task: gulp@0
    displayName: Build nerdbank-gitversioning NPM package
    inputs:
      gulpfile: src\nerdbank-gitversioning.npm\gulpfile.js

# Our unit tests use MSBuild 14
#  - powershell: Invoke-WebRequest https://download.microsoft.com/download/E/E/D/EEDF18A8-4AED-4CE0-BEBE-70A83094FC5A/BuildTools_Full.exe -OutFile msbuild14.exe
#    displayName: Downloading MSBuild 14
#  - script: start /wait msbuild14.exe /q /full /log "$(Build.ArtifactStagingDirectory)\build_logs\msbuild14.log"
#    displayName: Installing MSBuild 14

#  - task: VSTest@2
#    displayName: Run tests
#    inputs:
#      searchFolder: bin/Nerdbank.GitVersioning.Tests
#      testFiltercriteria: TestCategory!=FailsOnAzurePipelines
#      platform: $(BuildPlatform)
#      configuration: $(BuildConfiguration)
#    continueOnError: true

  - script: dotnet test Nerdbank.GitVersioning.Tests --no-build -c $(BuildConfiguration) --filter "TestCategory!=FailsOnAzurePipelines" --logger "trx;LogFileName=$(Build.ArtifactStagingDirectory)\TestLogs\TestResults.trx"
    displayName: Run tests
    workingDirectory: src

  - task: PublishTestResults@2
    displayName: Publish test results
    inputs:
      testResultsFormat: VSTest
      testResultsFiles: '*.trx'
      searchFolder: $(Build.ArtifactStagingDirectory)\TestLogs
      buildPlatform: $(BuildPlatform)
      buildConfiguration: $(BuildConfiguration)
    condition: always()

  - task: CopyFiles@1
    inputs:
      sourceFolder: $(System.DefaultWorkingDirectory)/bin
      Contents: |
        **\*.nupkg
        js\*.tgz
      TargetFolder: $(Build.ArtifactStagingDirectory)/deployables
      flattenFolders: true
    displayName: Collecting deployable artifacts
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)/deployables
      ArtifactName: deployables
      ArtifactType: Container
    displayName: Publish deployables artifacts
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)/build_logs
      ArtifactName: build_logs
      ArtifactType: Container
    displayName: Publish build_logs artifacts
    condition: succeededOrFailed()
  - task: NuGetCommand@2
    displayName: Pushing package to StarkBIM feed
    inputs:
      command: push
      packagesToPush: $(Build.ArtifactStagingDirectory)/deployables/*.*nupkg
      nuGetFeedType: internal
      publishVstsFeed: '84d4960b-eb45-4699-93f1-3df5542ce440'
      allowPackageConflicts: true
    condition: and(succeeded(), ne(variables['System.PullRequest.IsFork'], 'true'))

- job: Ubuntu_Xenial
  dependsOn: Windows
  pool:
    vmImage: Ubuntu 16.04
  container: xenial
  steps:
  - bash: sudo apt update && sudo apt-get install -y git
    displayName: Install git
  - template: azure-pipelines/xplattest-pipeline.yml

- job: Ubuntu_Bionic
  dependsOn: Windows
  pool:
    vmImage: Ubuntu 16.04 # not a bug. we always use this pool, but use containers for the specific version
  container: bionic
  steps:
  - template: azure-pipelines/xplattest-pipeline.yml

- job: Ubuntu_Bionic_3_0
  dependsOn: Windows
  pool:
    vmImage: Ubuntu 16.04 # not a bug. we always use this pool, but use containers for the specific version
  container: bionic-3.0
  steps:
  - template: azure-pipelines/xplattest-pipeline.yml

- job: Ubuntu_Disco
  dependsOn: Windows
  pool:
    vmImage: Ubuntu 16.04 # not a bug. we always use this pool, but use containers for the specific version
  container: disco
  condition: false # it does not yet pass: https://github.com/AArnott/Nerdbank.GitVersioning/issues/392
  steps:
  - template: azure-pipelines/xplattest-pipeline.yml

- job: macOS
  dependsOn: Windows
  pool:
    vmImage: macOS 10.13
  steps:
  - template: azure-pipelines/xplattest-pipeline.yml
